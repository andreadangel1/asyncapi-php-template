# <%= appTitle %>

<% for (let channelName in channels) { -%>
## Channel '<%= channelName %>' Example

```php
<?php

require_once(__DIR__ . '/vendor/autoload.php');

use AsyncAPI\Services\MessageBroker\AMQP\AMQPClientConfig;
use AsyncAPI\Services\MessageBroker\AMQP\AMQPClient;

use React\EventLoop\Loop;
use Rx\Scheduler;

use <%= servicesNamespace %>\Channels\<%= channelName.charAt(0).toUpperCase() + channelName.slice(1) %>Channel;
// TODO: include the subscribe operation payload class
use ExampleApp\Models\DomainEvent;
// TODO: cycle through subscribe operations and include the payload type
use ExampleApp\Models\UserLoginEvent;
// TODO: cycle through the payload dependencies and include their types
use ExampleApp\Models\User;

$loop = Loop::get();

// You only need to set the default scheduler once
Scheduler::setDefaultFactory(function () use ($loop) {
    return new Scheduler\EventLoopScheduler($loop);
});

// read server type and configuration based on server param and use them here
$config = new AMQPClientConfig('localhost', 5672, 'user', 'password');
$client = new AMQPClient($config);

$client->connect();

// TODO: use the channel name
$<%= channelName %>Channel = new <%= channelName.charAt(0).toUpperCase() + channelName.slice(1) %>Channel($client);

// TODO: use the first publish operation payload subclass
// TODO: instantiate payload dependencies, use a random data generation lib
// TODO: instantiate the payload object
$user = new User(321, 'John', 'Doe', 'john.doe@example.com');
$userLoginEvent = new UserLoginEvent($user);

$<%= channelName %>Channel-><%= channels[channelName].publish().id() %>($userLoginEvent);

$<%= channelName %>Channel-><%= channels[channelName].subscribe().id() %>()->subscribe(function (DomainEvent $event) {
    print_r($event);
});

// TODO: use the published class subscribe operation
$<%= channelName %>Channel->userLoginEvent->subscribe(function (UserLoginEvent $userLoginEvent) {
    print_r($userLoginEvent);
});

$<%= channelName %>Channel->listen();
```

You can also try to publish a message representing an event on your own. Try the following message payload:

```json
{
    "_type": "UserLoginEvent",
    "id": 124,
    "user": {
        "id": 322,
        "first_name": "Jane",
        "last_name": "Doe",
        "email": "jane.doe@example.com"
    }
}
```
<% } %>