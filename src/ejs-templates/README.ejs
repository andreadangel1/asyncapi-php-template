# <%= appTitle %>

<% for (const channelDTO of channelDTOs) { -%>
## Channel '<%= channelDTO.channelName %>' Example

<%= channelDTO.channel.description() %>

```php
<?php

require_once(__DIR__ . '/vendor/autoload.php');

<% if (server.protocol() === CONSTANTS.AMQP_PROTOCOL && server.protocolVersion() === CONSTANTS.AMQP_PROTOCOL_VERSION) { -%>
use AsyncAPI\Services\MessageBroker\AMQP\AMQPClientConfig;
use AsyncAPI\Services\MessageBroker\AMQP\AMQPClient;
<% } -%>

use React\EventLoop\Loop;
use Rx\Scheduler;

use <%= servicesNamespace %>\Channels\<%= channelDTO.channelClassNamePrefix %>Channel;
<%
const subscribeOperationClass = classHierarchy.getClass(channelDTO.payload.name); 
-%>

use <%= subscribeOperationClass.getPackageName() %>\<%= subscribeOperationClass.getName() %>;
<% for (const subClass of subscribeOperationClass.getSubClasses()) { -%>
use <%= subClass.getPackageName() %>\<%= subClass.getName() %>;
<% } -%>

$loop = Loop::get();

// You only need to set the default scheduler once
Scheduler::setDefaultFactory(function () use ($loop) {
    return new Scheduler\EventLoopScheduler($loop);
});

<%
if (server.protocol() === CONSTANTS.AMQP_PROTOCOL && server.protocolVersion() === CONSTANTS.AMQP_PROTOCOL_VERSION) {
    for (const serverSecuritySchema of serverSecuritySchemes) {
        if (serverSecuritySchema.type() === CONSTANTS.USER_PASSWORD_SECURITY_SCHEME_TYPE) {
            -%>
$username = 'user';
$password = 'password';
$config = new AMQPClientConfig('<%= server.url().split(':')[0] -%>', <%= server.url().split(':')[1] -%>, $username, $password);
$client = new AMQPClient($config);
            <%
        }
    }
} 
-%>

$client->connect();

<%
// TODO: use a custom DTO for channel, build it in the channel class evaluator
const channelClassInstanceName = lowerCaseFirst(channelDTO.channelClassNamePrefix) + 'Channel';
const subscribeOperationMethodName = channelDTO.channel.subscribe().id() ? `${channelDTO.channel.subscribe().id()}()` : `on${buildChannelClassNamePrefix(channelName)}()`;
-%>

$<%= channelClassInstanceName %> = new <%= channelDTO.channelClassNamePrefix %>Channel($client);

$<%= channelClassInstanceName %>-><%= subscribeOperationMethodName %>->subscribe(
    function (<%= subscribeOperationClass.getName() %> <%= classInstanceVariableName(subscribeOperationClass) %>) {
        echo "[x] Received <%= subscribeOperationClass.getName() %> object:\n";
        print_r(<%= classInstanceVariableName(subscribeOperationClass) %>);
    }
);

<% for (const subClass of subscribeOperationClass.getSubClasses()) { -%>
$<%= channelClassInstanceName %>-><%= lowerCaseFirst(subClass.getName()) %>->subscribe(
    function (<%= subClass.getName() %> <%= classInstanceVariableName(subClass) %>) {
        echo "[x] Received <%= subClass.getName() %> object:\n";
        print_r(<%= classInstanceVariableName(subClass) %>);
    }
);
<% } -%>

$<%= channelClassInstanceName %>->listen();
```
<% } %>