# <%= appTitle %>

<% for (const channelDTO of channelDTOs) {
    const usedClasses = [];
    if (channelDTO.subscribeOperation) {
        usedClasses.push(channelDTO.subscribeOperation.payload.name);
        for (const subClass of channelDTO.subscribeOperation.payload.subClasses) {
            usedClasses.push(subClass.name);
        }
    }

    const channelClassInstanceName = lowerCaseFirst(channelDTO.channelClassNamePrefix) + 'Channel';

    // TODO: refactor - synthesize a template data DTO using the following logic
    let channelParameters = null;
    if (channelDTO.channel.hasParameters()) {
        channelParameters = {};
        for (const parameterName in channelDTO.channel.parameters()) {
            const parameter = channelDTO.channel.parameter(parameterName);
            channelParameters[parameterName] = parameter.schema().examples().length > 0 ? parameter.schema().examples()[0] : 'parameter-value';
        }
    }

    let channelParameterArgumentsString = '';
    if (channelParameters !== null) {
        const channelParameterArguments = [];

        for (let parameterName in channelParameters) {
            channelParameterArguments.push(`'${parameterName}' => '${channelParameters[parameterName]}'`);
        }

        channelParameterArgumentsString = `[${channelParameterArguments.join(', ')}]`;
    }
    -%>
## Channel '<%= channelDTO.channelName %>' Example

<%= channelDTO.channel.description() %>

```php
<?php

require_once(__DIR__ . '/vendor/autoload.php');

<% if (server.protocol() === CONSTANTS.AMQP_PROTOCOL && server.protocolVersion() === CONSTANTS.AMQP_PROTOCOL_VERSION) { -%>
use AsyncAPI\Services\MessageBroker\AMQP\AMQPClientConfig;
use AsyncAPI\Services\MessageBroker\AMQP\AMQPClient;
<% } -%>

use React\EventLoop\Loop;
use Rx\Scheduler;

use <%= servicesNamespace %>\Channels\<%= channelDTO.channelClassNamePrefix %>Channel;

<% for (let usedClass of usedClasses) { -%>
use <%= modelsNamespace %>\<%= usedClass %>;
<% } -%>

$loop = Loop::get();

// You only need to set the default scheduler once
Scheduler::setDefaultFactory(function () use ($loop) {
    return new Scheduler\EventLoopScheduler($loop);
});

<%
if (server.protocol() === CONSTANTS.AMQP_PROTOCOL && server.protocolVersion() === CONSTANTS.AMQP_PROTOCOL_VERSION) {
    for (const serverSecuritySchema of serverSecuritySchemes) {
        if (serverSecuritySchema.type() === CONSTANTS.USER_PASSWORD_SECURITY_SCHEME_TYPE) {
            -%>
$username = 'user';
$password = 'password';
$config = new AMQPClientConfig('<%= server.url().split(':')[0] -%>', <%= server.url().split(':')[1] -%>, $username, $password);
$client = new AMQPClient($config);
            <%
        }
    }
} 
-%>

$client->connect();

$<%= channelClassInstanceName %> = new <%= channelDTO.channelClassNamePrefix %>Channel($client<%- channelParameterArgumentsString !== '' ? `, ${channelParameterArgumentsString}` : '' %>);

<% if (channelDTO.subscribeOperation) { -%>
$<%= channelClassInstanceName %>-><%= channelDTO.subscribeOperation.name %>()->subscribe(
    function (<%= channelDTO.subscribeOperation.payload.name %> <%= classInstanceVariableName(channelDTO.subscribeOperation.payload.name) %>) {
        echo "[x] Received <%= channelDTO.subscribeOperation.payload.name %> object:\n";
        print_r(<%= classInstanceVariableName(channelDTO.subscribeOperation.payload.name) %>);
    }
);
<% for (const subClass of channelDTO.subscribeOperation.payload.subClasses) { -%>
$<%= channelClassInstanceName %>->on<%= subClass.name %>()->subscribe(
    function (<%= subClass.name %> <%= classInstanceVariableName(subClass.name) %>) {
        echo "[x] Received <%= subClass.name %> object:\n";
        print_r(<%= classInstanceVariableName(subClass.name) %>);
    }
);
<% } -%>

$<%= channelClassInstanceName %>->listen();
<% } -%>
```

<% } %>